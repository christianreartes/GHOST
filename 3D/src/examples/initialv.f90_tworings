! Initial condition for the velocity.
! This file contains the expression used for the initial 
! velocity field. You can use temporary real arrays R1-R3 
! of size (1:nx,1:ny,ksta:kend) and temporary complex arrays 
! C1-C8 of size (nz,ny,ista:iend) to do intermediate 
! computations. The variable u0 should control the global 
! amplitude of the velocity, and variables vparam0-9 can be
! used to control the amplitudes of individual terms. At the
! end, the three components of the velocity in spectral
! space should be stored in the arrays vx, vy, and vz.

! Two rings
!     vparam0: radius of rings
!     vparam1: filter width (k0=vparam1/lambda)

      IF ( (anis.eq.1).or.(nx.ne.ny).or.(nx.ne.nz).or.(ny.ne.nz) ) THEN
        IF (myrank.eq.0) &
           PRINT *,'Quantum knots require Lx=Ly=Lz=2.pi and isotropic grids'
        STOP
      ENDIF

! Amplitude of the delta (amplitude of vorticity)
      rmp = 4.0_GP*pi*alpha/(2.0_GP*pi)**3
! Delta.s (step used for the parametrization of the curve)
      rms = 2.0_GP*pi/real(4*nx,kind=GP)

      DO i = ista,iend
         DO j = 1,ny
            DO k = 1,nz

            C1(k,j,i) = 0.
            C2(k,j,i) = 0.
            C3(k,j,i) = 0.

            DO ki = 1,4*n
               rmq = rms*real(ki-1,kind=GP)
               IF (( i.eq.1 ).and.( j.eq.1 ).and.( k.eq.1 )) THEN
                  rmt = 0.                ! 0 for k=0
               ELSE IF ( kk2(k,j,i).lt.kmax ) THEN
                  rmt = 1.0_GP/kk2(k,j,i) ! -Laplac^(-1) in other case
               ELSE
                  rmt = 0.                ! 0 for k>=kmax
               ENDIF
               C1(k,j,i) = C1(k,j,i) + rmp*rms*rmt*(           &
                             exp(-im*(                         &
                             kx(i)*(pi-vparam0/2+vparam0*cos(rmq))+    &
                             ky(j)*(pi+vparam0*sin(rmq))+      &
                             kz(k)*(pi+0.0_GP)))               &
                             * (-vparam0*sin(rmq)) +           &
                             exp(-im*(                         &
                             kx(i)*(pi+vparam0/2+vparam0*cos(rmq))+    &
                             ky(j)*(pi+0.0_GP)+                &
                             kz(k)*(pi+vparam0*sin(rmq))))     &
                             * (-vparam0*sin(rmq)))
               C2(k,j,i) = C2(k,j,i) + rmp*rms*rmt*(           &
                             exp(-im*(                         &
                             kx(i)*(pi-vparam0/2+vparam0*cos(rmq))+    &
                             ky(j)*(pi+vparam0*sin(rmq))+      &
                             kz(k)*(pi+0.0_GP)))               &
                             * (+vparam0*cos(rmq)) +           &
                             exp(-im*(                         &
                             kx(i)*(pi+vparam0/2+vparam0*cos(rmq))+    &
                             ky(j)*(pi+0.0_GP)+                &
                             kz(k)*(pi+vparam0*sin(rmq))))     &
                             * (0.0_GP))
               C3(k,j,i) = C3(k,j,i) + rmp*rms*rmt*(           &
                             exp(-im*(                         &
                             kx(i)*(pi-vparam0/2+vparam0*cos(rmq))+    &
                             ky(j)*(pi+vparam0*sin(rmq))+      &
                             kz(k)*(pi+0.0_GP)))               &
                             * (0.0_GP) +                      &
                             exp(-im*(                         &
                             kx(i)*(pi+vparam0/2+vparam0*cos(rmq))+    &
                             ky(j)*(pi+0.0_GP)+                &
                             kz(k)*(pi+vparam0*sin(rmq))))     &
                             * (+vparam0*cos(rmq)))
            END DO

            END DO
         END DO
       END DO

! Get the velocity as -Laplac^(-1)[curl(w)]
      CALL ROTOR3(C2,C3,C4,1)
      CALL ROTOR3(C1,C3,C5,2)
      CALL ROTOR3(C1,C2,C6,3)

! Filter the velocity by exp(-k^2/(2*k0^2)) and normalize by N^3
! Note C4,C5,C6 are not normalized by N^3, but vx,vy,vz are
      rmq = .5_GP*lambda**2/vparam1**2!      
      rms = real(nx,kind=GP)**3
      DO i = ista,iend
         DO j = 1,ny
            DO k = 1,nz
               rmp = exp(-kk2(k,j,i)*rmq)*rms
               vx(k,j,i) = C4(k,j,i)*rmp
               vy(k,j,i) = C5(k,j,i)*rmp
               vz(k,j,i) = C6(k,j,i)*rmp
            END DO
         END DO
      END DO

! Now we get the velocity in physical space to correct the mean flow
      C3 = C6
      CALL fftp3d_complex_to_real(plancr,C6,R3,MPI_COMM_WORLD) ! vz
! Let us compute the z line integral
      DO ki = 0,nprocs-1
         IF ( ki.eq.myrank ) THEN
            IF ( myrank.eq.0 ) THEN
               rmp = 0.0_GP
            ELSE
               CALL MPI_RECV(rmp,1,GC_REAL,myrank-1,1,MPI_COMM_WORLD,iret,ierr)
            ENDIF
            DO k = ksta,kend-1
               rmp = rmp+R3(1,1,k)*pi/(alpha*real(nx,KIND=GP))
            END DO
            IF ( myrank.lt.nprocs-1 ) THEN
               rmp = rmp+R3(1,1,kend)*pi/(alpha*real(nx,KIND=GP))
               CALL MPI_SEND(rmp,1,GC_REAL,myrank+1,1,MPI_COMM_WORLD,ierr)
            ELSE
               rms = rmp+R3(1,1,nz)*pi/(alpha*real(nx,KIND=GP)) ! Correct phase
            ENDIF
         ENDIF
      END DO
      CALL MPI_BCAST(rms,1,GC_COMPLEX,nprocs-1,MPI_COMM_WORLD,ierr)
! We correct for half-quantum uniform velocity in vz
      IF ( myrank.eq.0 ) THEN
         vz(1,1,1) = vz(1,1,1) - rms/ pi *alpha*real(nx,kind=GP)**3
         C3(1,1,1) = C3(1,1,1) - rms/ pi *alpha
      ENDIF

! Same for vx
      C1 = C4
      CALL fftp3d_complex_to_real(plancr,C4,R3,MPI_COMM_WORLD) ! vx
      rmp = 0.0_GP
      DO i = 1,nx-1
         rmp = rmp+R3(i,1,ksta)*pi/(alpha*real(nx,KIND=GP))
      END DO
      rms = rmp+R3(nx,1,ksta)*pi/(alpha*real(nx,KIND=GP))
! We correct for half-quantum uniform velocity in vx
      IF ( myrank.eq.0 ) THEN
         vx(1,1,1) = vx(1,1,1) - rms/pi *alpha*real(nx,kind=GP)**3
         C1(1,1,1) = C1(1,1,1) - rms/pi *alpha
      ENDIF

! Same for vy
      C2 = C5
      CALL fftp3d_complex_to_real(plancr,C5,R3,MPI_COMM_WORLD) ! vy
      rmp = 0.0_GP
      DO j = 1,ny-1
         rmp = rmp+R3(1,j,ksta)*pi/(alpha*real(nx,KIND=GP))
      END DO
      rms = rmp+R3(1,ny,ksta)*pi/(alpha*real(nx,KIND=GP))
! We correct for half-quantum uniform velocity in vy
      IF ( myrank.eq.0 ) THEN
         vy(1,1,1) = vy(1,1,1) - rms/pi *alpha*real(nx,kind=GP)**3
         C2(1,1,1) = C2(1,1,1) - rms/pi *alpha
      ENDIF