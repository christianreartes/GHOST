! External mechanical forcing.
! This file contains the expression used for the external
! mechanical forcing. You can use temporary real arrays
! R1-R3 of size (1:n,1:n,ksta:kend) and temporary complex
! arrays C1-C8 of size (n,n,ista:iend) to do intermediate
! computations. The variable m0 should control the global
! amplitude of the forcing, and variables fparam0-9 can be
! used to control the amplitudes of individual terms. At the
! end, the three components of the forcing in spectral
! space should be stored in the arrays mx, my, and mz.

! Generates random phased initial conditions for the
! magnetic field with the value of rho_m specified.

!     kdn : minimum wave number 
!     kup : maximum wave number 
!     m0  : twice the global energy in the magnetic field
!     v0  : twice the global energy in the velocity
!     aparam0: seed for random number generation
!     aparam1: related to the helicity by aparam1 = ARCSIN(rho_m)/2
!     aparam3: used in file for SIN(aparam1)
!     aparam4: used in file for COS(aparam2)
!     aparam5: used in file for the magnitude of the first random vector
!     aparam6: used in file for the magnitude of the second random vector
!     aparam7: used in file for the initial correlation between the two random vectors

      seed = aparam0     
 
      C1 = 0.0_GP
      C2 = 0.0_GP
      C3 = 0.0_GP

      C4 = 0.0_GP
      C5 = 0.0_GP
      C6 = 0.0_GP

! Compute first divergence free random vector
! Generate divergence-free noise:
      tmp = 1.0_GP/real(nx,KIND=GP)*real(ny,KIND=GP)*real(nz,KIND=GP)
! To ensure Div v = 0: Set noise, Nz, s.t. kx Nx + ky Ny + kz Nz=0:
      IF (ista.eq.1) THEN
!$omp parallel do
        DO j = 2,ny/2+1
          IF ((kk2(1,j,1).le.mkup**2).and.(kk2(1,j,1).ge.mkdn**2)) THEN
          dump = 1.0_GP
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          IF ( kz(1).GT.tiny ) THEN
          C1    (1,j,1) = cdump
          C1(1,ny-j+2,1) = conjg(C1(1,j,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C2    (1,j,1) = cdump
          C2(1,ny-j+2,1) = conjg(C2(1,j,1))
          C3(1,j,1) = -(kx(1)*C1(1,j,1) + ky(j)*C2(1,j,1))/kz(1)
          C3(1,ny-j+2,1) = conjg(C3(1,j,1))
          ENDIF
          ELSE
          C1    (1,j,1) = 0.0_GP
          C1(1,ny-j+2,1) = 0.0_GP
          C2    (1,j,1) = 0.0_GP
          C2(1,ny-j+2,1) = 0.0_GP
          C3(1,j,1) = 0.0_GP
          C3(1,ny-j+2,1) = 0.0_GP
          ENDIF
        END DO
!$omp parallel do
        DO k = 2,nz/2+1
          IF ((kk2(k,1,1).le.mkup**2).and.(kk2(k,1,1).ge.mkdn**2)) THEN
          dump = 1.0_GP
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          IF ( kz(k).GT.tiny ) THEN
          C1    (k,1,1) = cdump
          C1(nz-k+2,1,1) = conjg(C1(k,1,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C2    (k,1,1) = cdump
          C2(nz-k+2,1,1) = conjg(C2(k,1,1))
          C3(k,1,1) = -(kx(1)*C1(k,1,1) + ky(1)*C2(k,1,1))/kz(k)
          C3(nz-k+2,1,1) = conjg(C3(k,1,1))
          ENDIF
          ELSE
          C1    (k,1,1) = 0.0_GP
          C1(nz-k+2,1,1) = 0.0_GP
          C2    (k,1,1) = 0.0_GP
          C2(nz-k+2,1,1) = 0.0_GP
          C3(k,1,1) = 0.0_GP
          C3(nz-k+2,1,1) = 0.0_GP
          ENDIF
        END DO
!$omp parallel do private (k)
        DO j = 2,ny
          DO k = 2,nz/2+1
            IF ((kk2(k,j,1).le.mkup**2).and.(kk2(k,j,1).ge.mkdn**2)) THEN
            dump = 1.0_GP
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            IF ( kz(k).GT.tiny ) THEN
            C1        (k,j,1) = cdump
            C1(nz-k+2,ny-j+2,1) = conjg(C1(k,j,1))
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C2        (k,j,1) = cdump
            C2(nz-k+2,ny-j+2,1) = conjg(C2(k,j,1))
            C3(k,j,1) = -(kx(1)*C1(k,j,1) + ky(j)*C2(k,j,1))/kz(k)
            C3(nz-k+2,ny-j+2,1) = conjg(C3(k,j,1))
            ENDIF
            ELSE
            C1        (k,j,1) = 0.0_GP
            C1(nz-k+2,ny-j+2,1) = 0.0_GP
            C2        (k,j,1) = 0.0_GP
            C2(nz-k+2,ny-j+2,1) = 0.0_GP
            C3(k,j,1) = 0.0_GP
            C3(nz-k+2,ny-j+2,1) = 0.0_GP 
            ENDIF
          END DO
        END DO
!$omp parallel do if (iend-2.ge.nth) private (j,k)
        DO i = 2,iend
!$omp parallel do if (iend-2.lt.nth) private (k)
          DO j = 1,ny
            DO k = 1,nz
              IF ((kk2(k,j,i).le.mkup**2).and.(kk2(k,j,i).ge.mkdn**2)) THEN
              dump = 1.0_GP              
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              IF ( kz(k).GT.tiny ) THEN
              C1(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C2(k,j,i) = cdump
              C3(k,j,i) = -(kx(i)*C1(k,j,i) + ky(j)*C2(k,j,i))/kz(k)
              ENDIF
              ELSE
              C1(k,j,i) = 0.0_GP
              C2(k,j,i) = 0.0_GP
              C3(k,j,i) = 0.0_GP 
              ENDIF
            END DO
          END DO
        END DO
      ELSE
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
        DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
          DO j = 1,ny
            DO k = 1,nz
              IF ((kk2(k,j,i).le.mkup**2).and.(kk2(k,j,i).ge.mkdn**2)) THEN
              dump = 1.0_GP
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              IF ( kz(k).GT.tiny ) THEN
              C1(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C2(k,j,i) = cdump
              C3(k,j,i) = -(kx(i)*C1(k,j,i) + ky(j)*C2(k,j,i))/kz(k)
              ENDIF
              ELSE
              C1(k,j,i) = 0.0_GP
              C2(k,j,i) = 0.0_GP
              C3(k,j,i) = 0.0_GP 
              ENDIF
            END DO
          END DO
        END DO
      ENDIF

! Compute second divergence free random vector
! To ensure Div v = 0: Set noise, Nz, s.t. kx Nx + ky Ny + kz Nz=0:
      IF (ista.eq.1) THEN
!$omp parallel do
        DO j = 2,ny/2+1
          IF ((kk2(1,j,1).le.mkup**2).and.(kk2(1,j,1).ge.mkdn**2)) THEN
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          IF ( kz(1).GT.tiny ) THEN
          C4    (1,j,1) = cdump
          C4(1,ny-j+2,1) = conjg(C4(1,j,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C5    (1,j,1) = cdump
          C5(1,ny-j+2,1) = conjg(C5(1,j,1))
          C6(1,j,1) = -(kx(1)*C4(1,j,1) + ky(j)*C5(1,j,1))/kz(1)
          C6(1,ny-j+2,1) = conjg(C6(1,j,1))
          ENDIF
          ELSE
          C4    (1,j,1) = 0.0_GP 
          C4(1,ny-j+2,1) = 0.0_GP
          C5    (1,j,1) = 0.0_GP
          C5(1,ny-j+2,1) = 0.0_GP
          C6(1,j,1) = 0.0_GP
          C6(1,ny-j+2,1) = 0.0_GP
          ENDIF
        END DO
!$omp parallel do
        DO k = 2,nz/2+1
          IF ((kk2(k,1,1).le.mkup**2).and.(kk2(k,1,1).ge.mkdn**2)) THEN
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          IF ( kz(k).GT.tiny ) THEN
          C4    (k,1,1) = cdump
          C4(nz-k+2,1,1) = conjg(C4(k,1,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C5    (k,1,1) = cdump
          C5(nz-k+2,1,1) = conjg(C5(k,1,1))
          C6(k,1,1) = -(kx(1)*C4(k,1,1) + ky(1)*C5(k,1,1))/kz(k)
          C6(nz-k+2,1,1) = conjg(C6(k,1,1))
          ENDIF
          ELSE
          C4    (k,1,1) = 0.0_GP 
          C4(nz-k+2,1,1) = 0.0_GP
          C5    (k,1,1) = 0.0_GP
          C5(nz-k+2,1,1) = 0.0_GP
          C6(k,1,1) = 0.0_GP
          C6(nz-k+2,1,1) = 0.0_GP
          ENDIF
        END DO
!$omp parallel do private (k)
        DO j = 2,ny
          DO k = 2,nz/2+1
            IF ((kk2(k,j,1).le.mkup**2).and.(kk2(k,j,1).ge.mkdn**2)) THEN
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            IF ( kz(k).GT.tiny ) THEN
            C4        (k,j,1) = cdump
            C4(nz-k+2,ny-j+2,1) = conjg(C4(k,j,1))
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C5        (k,j,1) = cdump
            C5(nz-k+2,ny-j+2,1) = conjg(C5(k,j,1))
            C6(k,j,1) = -(kx(1)*C4(k,j,1) + ky(j)*C5(k,j,1))/kz(k)
            C6(nz-k+2,ny-j+2,1) = conjg(C6(k,j,1))
            ENDIF
            ELSE
            C4        (k,j,1) = 0.0_GP 
            C4(nz-k+2,ny-j+2,1) = 0.0_GP
            C5        (k,j,1) = 0.0_GP
            C5(nz-k+2,ny-j+2,1) = 0.0_GP
            C6(k,j,1) = 0.0_GP
            C6(nz-k+2,ny-j+2,1) = 0.0_GP 
            ENDIF
          END DO
        END DO
!$omp parallel do if (iend-2.ge.nth) private (j,k)
        DO i = 2,iend
!$omp parallel do if (iend-2.lt.nth) private (k)
          DO j = 1,ny
            DO k = 1,nz
              IF ((kk2(k,j,i).le.mkup**2).and.(kk2(k,j,i).ge.mkdn**2)) THEN
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              IF ( kz(k).GT.tiny ) THEN
              C4(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C5(k,j,i) = cdump
              C6(k,j,i) = -(kx(i)*C4(k,j,i) + ky(j)*C5(k,j,i))/kz(k)
              ENDIF
              ELSE
              C4(k,j,i) = 0.0_GP 
              C5(k,j,i) = 0.0_GP
              C6(k,j,i) = 0.0_GP
              ENDIF
            END DO
          END DO
        END DO
      ELSE
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
        DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
          DO j = 1,ny
            DO k = 1,nz
              IF ((kk2(k,j,i).le.mkup**2).and.(kk2(k,j,i).ge.mkdn**2)) THEN
              dump = 1.0_GP
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              IF ( kz(k).GT.tiny ) THEN
              C4(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C5(k,j,i) = cdump
              C6(k,j,i) = -(kx(i)*C4(k,j,i) + ky(j)*C5(k,j,i))/kz(k)
              ENDIF
              ELSE
              C4(k,j,i) = 0.0_GP 
              C5(k,j,i) = 0.0_GP
              C6(k,j,i) = 0.0_GP
              ENDIF
            END DO
          END DO
        END DO
      ENDIF

! deorrelate vectors 
      ! Normalize vectors to unity       
      CALL normalize(C1,C2,C3,1.0_GP,1,MPI_COMM_WORLD)
      CALL normalize(C4,C5,C6,1.0_GP,1,MPI_COMM_WORLD)
      
      !Compute initial correlation between two vectors
      CALL cross(C1,C2,C3,C4,C5,C6,tmp,1)
      aparam7 = tmp
      CALL MPI_BCAST(aparam7,1,GC_REAL,0,MPI_COMM_WORLD,ierr)
      
      !Compute angle needed for decorrelation
      aparam7 = ASIN(-1.0_GP*aparam7)/2.0_GP
      aparam3 = SIN(aparam7)
      aparam4 = COS(aparam7)
      
      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                C7(k,j,i) = aparam3*C4(k,j,i)+aparam4*C1(k,j,i)
                C8(k,j,i) = aparam3*C1(k,j,i)+aparam4*C4(k,j,i)
             END DO
          END DO
      END DO
      C1 = C7
      C4 = C8

      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                C7(k,j,i) = aparam3*C5(k,j,i)+aparam4*C2(k,j,i)
                C8(k,j,i) = aparam3*C2(k,j,i)+aparam4*C5(k,j,i)
             END DO
          END DO
      END DO
      C2 = C7
      C5 = C8

      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                C7(k,j,i) = aparam3*C6(k,j,i)+aparam4*C3(k,j,i)
                C8(k,j,i) = aparam3*C3(k,j,i)+aparam4*C6(k,j,i)
             END DO
          END DO
      END DO
      C3 = C7
      C6 = C8

      !CALL helicity(C1,C2,C3,tmp)
      !write(6,*) 'HV1', tmp
      !CALL helicity(C4,C5,C6,tmp)
      !write(6,*) 'HV2', tmp
      !CALL cross(C1,C2,C3,C4,C5,C6,tmp,0)
      !write(6,*) 'HV3', tmp

! Correlate vectors
      ! Define angle needed for desired correlation
      aparam3 = SIN(aparam1)
      aparam4 = COS(aparam1)

      CALL normalize(C1,C2,C3,1.0_GP,1,MPI_COMM_WORLD)
      CALL normalize(C4,C5,C6,1.0_GP,1,MPI_COMM_WORLD)

      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                C7(k,j,i) = aparam3*C2(k,j,i)+aparam4*C5(k,j,i)
                C8(k,j,i) = aparam3*C3(k,j,i)+aparam4*C6(k,j,i)
             END DO
          END DO
      END DO
      CALL rotor3(C7,C8,C7,1)
      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                IF ( kk2(k,j,i).GT.tiny ) THEN
                mx(k,j,i) = aparam4*C1(k,j,i)+aparam3*C4(k,j,i)+ &
                            C7(k,j,i)/sqrt(kk2(k,j,i))
                ENDIF
             END DO
          END DO
      END DO

      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                C7(k,j,i) = aparam3*C1(k,j,i)+aparam4*C4(k,j,i)
                C8(k,j,i) = aparam3*C3(k,j,i)+aparam4*C6(k,j,i)
             END DO
          END DO
      END DO
      CALL rotor3(C7,C8,C7,2)
      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                IF ( kk2(k,j,i).GT.tiny ) THEN
                my(k,j,i) = aparam4*C2(k,j,i)+aparam3*C5(k,j,i)+ &
                            C7(k,j,i)/sqrt(kk2(k,j,i))
                ENDIF
             END DO
          END DO
      END DO

      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                C7(k,j,i) = aparam3*C1(k,j,i)+aparam4*C4(k,j,i)
                C8(k,j,i) = aparam3*C2(k,j,i)+aparam4*C5(k,j,i)
             END DO
          END DO
      END DO
      CALL rotor3(C7,C8,C7,3)
      DO i = ista,iend
          DO j = 1,ny
             DO k = 1,nz
                IF ( kk2(k,j,i).GT.tiny ) THEN
                mz(k,j,i) = aparam4*C3(k,j,i)+aparam3*C6(k,j,i)+ &
                            C7(k,j,i)/sqrt(kk2(k,j,i))
                END IF
             END DO
          END DO
      END DO

      CALL normalize(mx,my,mz,m0,0,MPI_COMM_WORLD)
