! Initial condition for the velocity.
! This file contains the expression used for the initial 
! velocity field. You can use temporary real arrays R1-R3 
! of size (1:n,1:n,ksta:kend) and temporary complex arrays 
! C1-C8 of size (n,n,ista:iend) to do intermediate 
! computations. The variable u0 should control the global 
! amplitude of the velocity, and variables vparam0-9 can be
! used to control the amplitudes of individual terms. At the
! end, the three components of the velocity in spectral
! space should be stored in the arrays vx, vy, and vz.

! Superposition of ABC flows with k^(-4) spectrum + noise
!     kdn    : minimum wave number
!     kup    : maximum wave number
!     vparam0: level of noise
!     vparam2: minimum wave number for the noise
!     vparam3: A amplitude
!     vparam4: B amplitude
!     vparam5: C amplitude

      IF ( (abs(Lx-Ly).gt.tiny).or.(abs(Lx-Lz).gt.tiny) ) THEN
        IF (myrank.eq.0) &
           PRINT *,'ABC initial conditions require Lx=Ly=Lz'
        STOP
      ENDIF

      R1 = 0.
      R2 = 0.
      R3 = 0.
      
! Compute the real-space ABC velocity field:
      DO k = ksta,kend
         DO j = 1,ny
            DO i = 1,nx

            DO ki = INT(kdn),INT(kup)
               R1(i,j,k) = R1(i,j,k)+(vparam4*COS(2*pi*ki*(real(j,kind=GP)-1)/ &
                          real(ny,kind=GP))+vparam5*SIN(2*pi*ki*(real(k,kind=GP)-1)/ &
                          real(nz,kind=GP)))/ki**2
               R2(i,j,k) = R2(i,j,k)+(vparam3*SIN(2*pi*ki*(real(i,kind=GP)-1)/ &
                          real(nx,kind=GP))+vparam5*COS(2*pi*ki*(real(k,kind=GP)-1)/ &
                          real(nz,kind=GP)))/ki**2
               R3(i,j,k) = R3(i,j,k)+(vparam3*COS(2*pi*ki*(real(i,kind=GP)-1)/ &
                          real(nx,kind=GP))+vparam4*SIN(2*pi*ki*(real(j,kind=GP)-1)/ &
                          real(ny,kind=GP)))/ki**2
            END DO

            END DO
         END DO
      END DO

      CALL fftp3d_real_to_complex(planrc,R1,vx,MPI_COMM_WORLD)
      CALL fftp3d_real_to_complex(planrc,R2,vy,MPI_COMM_WORLD)
      CALL fftp3d_real_to_complex(planrc,R3,vz,MPI_COMM_WORLD)

      CALL normalize(vx,vy,vz,u0,1,MPI_COMM_WORLD)

      C1 = 0.0_GP
      C2 = 0.0_GP
      C3 = 0.0_GP
      C4 = 0.0_GP
      C5 = 0.0_GP
      C6 = 0.0_GP

! Generate divergence-free noise:
      tmp = 1.0_GP/(real(nx,kind=GP)*real(ny,kind=GP)*real(nz,kind=GP))

! Compute noise components:
      IF (ista.eq.1) THEN
!$omp parallel do
        DO j = 2,ny/2+1
          dump = 0.0_GP
          IF ( (kk2(1,j,1).ge.vparam2**2) ) THEN
            rmq  = sqrt(kk2(1,j,1))
            dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1     (1,j,1) = cdump
          C1(1,ny-j+2,1) = conjg(C1(1,j,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C2     (1,j,1) = cdump
          C2(1,ny-j+2,1) = conjg(C2(1,j,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C3     (1,j,1) = cdump
          C3(1,ny-j+2,1) = conjg(C3(1,j,1))
        END DO
!$omp parallel do
        DO k = 2,nz/2+1
          dump = 0.0_GP
          IF ( (kk2(k,1,1).ge.vparam2**2) ) THEN
             rmq  = sqrt(kk2(k,1,1))
             dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1     (k,1,1) = cdump
          C1(nz-k+2,1,1) = conjg(C1(k,1,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C2     (k,1,1) = cdump
          C2(nz-k+2,1,1) = conjg(C2(k,1,1))
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C3     (k,1,1) = cdump
          C3(nz-k+2,1,1) = conjg(C3(k,1,1))
        END DO
!$omp parallel do private (k)
        DO j = 2,ny
          DO k = 2,nz/2+1
            dump = 0.0_GP
            IF ( (kk2(k,j,1).ge.vparam2**2) ) THEN
              rmq  = sqrt(kk2(k,j,1))
              dump = 1.0_GP/rmq**3
            ENDIF
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C1          (k,j,1) = cdump
            C1(nz-k+2,ny-j+2,1) = conjg(C1(k,j,1))
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C2          (k,j,1) = cdump
            C2(nz-k+2,ny-j+2,1) = conjg(C2(k,j,1))
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C3          (k,j,1) = cdump
            C3(nz-k+2,ny-j+2,1) = conjg(C3(k,j,1))
          END DO
        END DO
!$omp parallel do if (iend-2.ge.nth) private (j,k)
        DO i = 2,iend
!$omp parallel do if (iend-2.lt.nth) private (k)
          DO j = 1,ny
            DO k = 1,nz
              dump = 0.0_GP
              IF ( (kk2(k,j,i).ge.vparam2**2) ) THEN
                rmq  = sqrt(kk2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C2(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C3(k,j,i) = cdump
            END DO
          END DO
        END DO
      ELSE
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
        DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
          DO j = 1,ny
            DO k = 1,nz
              dump = 0.0_GP
              IF ( (kk2(k,j,i).ge.vparam2**2) ) THEN
                rmq  = sqrt(kk2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C2(k,j,i) = cdump
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C3(k,j,i) = cdump
            END DO
          END DO
        END DO
      ENDIF
!
! Compute curl of noise comps: 
      CALL rotor3(C2,C3,C4,1)  ! C4=Noise_x
      CALL rotor3(C1,C3,C5,2)  ! C5=Noise_y
      CALL rotor3(C1,C2,C6,3)  ! C6=Noise_z

! Normalize noise to fraction of initial kinetic energy:
      CALL normalize(C4,C5,C6,sqrt(vparam0)*u0,1,MPI_COMM_WORLD)

!
! Add noise to a:
      vx = vx + C4
      vy = vy + C5
      vz = vz + C6

! Normalize final v:
      CALL normalize(vx,vy,vz,u0,1,MPI_COMM_WORLD)
