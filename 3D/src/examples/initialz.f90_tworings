! Initial condition for the wavefunction.
! This file contains the expression used for the initial
! wavefunction. You can use temporary real arrays R1-R3
! of size (1:nx,1:ny,ksta:kend) and temporary complex arrays
! C1-C8 of size (nz,ny,ista:iend) to do intermediate
! computations. The variables rho0 and zparam0-9 can be used 
! to control properties of the initial wavefunction. At the
! end, the real and imaginary parts of the wavefunction in 
! spectral space should be stored in the arrays zre and zim.

! Array of vortices for the two-rings flow

      IF ( (anis.eq.1).or.(nx.ne.ny).or.(nx.ne.nz).or.(ny.ne.nz) ) THEN
        IF (myrank.eq.0) &
           PRINT *,'Quantum knots require Lx=Ly=Lz=2.pi and isotropic grids'
        STOP
      ENDIF

! Set phi(1,1,1) to one
! i=j=1 and we integrate along z

      CALL fftp3d_complex_to_real(plancr,C3,R3,MPI_COMM_WORLD) ! vz
      DO ki = 0,nprocs-1
      IF ( ki.eq.myrank ) THEN
         IF ( myrank.eq.0 ) THEN
            R1(1,1,1) = 1.0_GP
            R2(1,1,1) = 0.0_GP
            cdump = R1(1,1,1)+im*R2(1,1,1)
         ELSE
            CALL MPI_RECV(cdump,1,GC_COMPLEX,myrank-1,1,MPI_COMM_WORLD,iret,ierr)
            R1(1,1,ksta) = REAL(cdump)
            R2(1,1,ksta) = AIMAG(cdump)
         ENDIF
         DO k = ksta,kend-1
            cdump = cdump*EXP(im*R3(1,1,k)*pi/(alpha*REAL(nx,KIND=GP)))
            R1(1,1,k+1) = REAL(cdump)
            R2(1,1,k+1) = AIMAG(cdump)
         END DO
         IF ( myrank.lt.nprocs-1 ) THEN
            cdump = cdump*EXP(im*R3(1,1,kend)*pi/(alpha*REAL(nx,KIND=GP)))
            CALL MPI_SEND(cdump,1,GC_COMPLEX,myrank+1,1,MPI_COMM_WORLD,ierr)
         ENDIF
      ENDIF
      END DO

! j=1 and we now integrate along x (for all z)

      CALL fftp3d_complex_to_real(plancr,C1,R3,MPI_COMM_WORLD) ! vx
      DO k = ksta,kend
         DO i = 1,nx-1
            cdump = (R1(i,1,k)+im*R2(i,1,k))*EXP(im*R3(i,1,k)*pi/(alpha*REAL(nx,KIND=GP)))
            R1(i+1,1,k) = REAL(cdump)
            R2(i+1,1,k) = AIMAG(cdump)
         END DO
      END DO

! We now integrate along y (for all x,z)

      CALL fftp3d_complex_to_real(plancr,C2,R3,MPI_COMM_WORLD) ! vy
      DO k = ksta,kend
         DO i = 1,nx
            DO j = 1,ny-1
               cdump = (R1(i,j,k)+im*R2(i,j,k))*EXP(im*R3(i,j,k)*pi/(alpha*REAL(nx,KIND=GP)))
               R1(i,j+1,k) = REAL(cdump)
               R2(i,j+1,k) = AIMAG(cdump)
            END DO
         END DO
      END DO

! We set the amplitude of the density
      DO k = ksta,kend
         DO j = 1,ny
            DO i = 1,nx

            rmt = 2*pi
            DO ki = 1,4*n
               rm1 = 2.0_GP*pi*REAL(ki-1,KIND=GP)/REAL(4*nx,KIND=GP)
               ! first ring
               rmp = pi-vparam0/2+vparam0*cos(rm1) ! x
               rmq = pi+vparam0*sin(rm1)           ! y
               rms = pi                            ! z
               rmt = min(rmt,sqrt((2*pi*REAL(i-1,KIND=GP)/REAL(nx,KIND=GP)-rmp)**2 &
                                 +(2*pi*REAL(j-1,KIND=GP)/REAL(ny,KIND=GP)-rmq)**2 &
                                 +(2*pi*REAL(k-1,KIND=GP)/REAL(nz,KIND=GP)-rms)**2))
               ! second ring
               rmp = pi+vparam0/2+vparam0*cos(rm1) ! x
               rmq = pi                            ! y
               rms = pi+vparam0*sin(rm1)           ! z
               rmt = min(rmt,sqrt((2*pi*REAL(i-1,KIND=GP)/REAL(nx,KIND=GP)-rmp)**2 &
                                 +(2*pi*REAL(j-1,KIND=GP)/REAL(ny,KIND=GP)-rmq)**2 &
                                 +(2*pi*REAL(k-1,KIND=GP)/REAL(nz,KIND=GP)-rms)**2))
            END DO

            tmq = sqrt((11.0_GP*(rmt/lambda)**2/32.0_GP+11.0_GP*(rmt/lambda)**4/384.0_GP) &
                      /(1.0_GP +(rmt/lambda)**2/3.0_GP +11.0_GP*(rmt/lambda)**4/384.0_GP))
            R1(i,j,k) = R1(i,j,k)*sqrt(omegag/beta)*tmq
            R2(i,j,k) = R2(i,j,k)*sqrt(omegag/beta)*tmq

            END DO
         END DO
      END DO

! We transform the wavefunction to Fourier space
      CALL fftp3d_real_to_complex(planrc,R1,zre,MPI_COMM_WORLD)
      CALL fftp3d_real_to_complex(planrc,R2,zim,MPI_COMM_WORLD)
